; ModuleID = 'test.bc'
source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"*string1: %s \0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"hellooooooooooooooooooooo\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%s \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  ; retval alloca
  %retval = alloca i32, align 4

  ; char *string1, *string2
  %string1 = alloca i8*, align 8
  %string2 = alloca i8*, align 8

  ; for문 안에 있는 int i
  %i = alloca i32, align 4

  ; retval store
  store i32 0, i32* %retval, align 4\

  ; char *string1 = (char*)malloc(sizeof(char) * 6);
  %call = call noalias i8* @malloc(i64 6) #3
  store i8* %call, i8** %string1, align 8

  ; char *string2 = (char*)malloc(sizeof(char) * 6);
  %call1 = call noalias i8* @malloc(i64 6) #3
  store i8* %call1, i8** %string2, align 8

  ; printf("*string1: %s \n", string1);
  %0 = load i8*, i8** %string1, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %0)
  
  ; string1 = "hellooooooooooooooooooooo";
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8** %string1, align 8
  
  ; printf("%s \n", string1);
  %1 = load i8*, i8** %string1, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %1)
  
  ; for문 안에 int i = 0;
  store i32 0, i32* %i, align 4
  ; 조건문으로 이동
  br label %for.cond

; 조건문
for.cond:                                         ; preds = %for.inc, %entry
  ; i < 12
  %2 = load i32, i32* %i, align 4
  ; compare signed less than
  ; op1가 op2보다 작으면 true (%2가 12보다 작으면 true)
  %cmp = icmp slt i32 %2, 12
  ; branch to for.body if %cmp is true, branch to for.end if %cmp is false
  br i1 %cmp, label %for.body, label %for.end

; for문 body: string2[i] = string1[i];
for.body:                                         ; preds = %for.cond;

  ; load string1 
  %3 = load i8*, i8** %string1, align 8
  ; load i 
  %4 = load i32, i32* %i, align 4

  ; i의 type을 i32에서 i64로 바꿔서
  %idxprom = sext i32 %4 to i64
  ; %arrayidx에 array element 값(index는 %idxprom) 가져와서 담음
  ; 인자) array 시작주소: %3 (string1), 계산할 array element의 index: %idxprom (i)
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  ; load %arrayidx (string1 element 값)
  %5 = load i8, i8* %arrayidx, align 1
  
  ; load string2
  %6 = load i8*, i8** %string2, align 8
  ; load i
  %7 = load i32, i32* %i, align 4

  ; i의 type을 i32에서 i64로 바꿔서
  %idxprom4 = sext i32 %7 to i64
  ; %arrayidx5에 array element 값(index는 %idxprom4) 가져와서 담음
  ; 인자) array 시작주소: %6 (string2), 계산할 array element의 index: %idxprom4 (i)
  %arrayidx5 = getelementptr inbounds i8, i8* %6, i64 %idxprom4

  ; string2[i] = string1[i];
  ; %arrayidx5(string2 element)에 %5(string1 element값 load한거) store
  store i8 %5, i8* %arrayidx5, align 1

  ; branch to for.inc (for문 안에 실행 다했으면 i++ 하러 가기)
  br label %for.inc

; i++
for.inc:                                          ; preds = %for.body
  ; i값 가져오고 1 더해서 store
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4

  ; branch to for.cond
  br label %for.cond, !llvm.loop !2

; for문 나간 다음 코드
for.end:                                          ; preds = %for.cond
  ; printf("%s \n", string2);
  %9 = load i8*, i8** %string2, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %9)
  
  ; return
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
